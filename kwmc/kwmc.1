.TH kwmc 1 "26 March 2016" "version 3.0.0"
.SH NAME
kwmc - interact with the kwm window manager
.SH SYNOPSIS
.B kwmc
[options]
.SH DESCRIPTION
.B kwmc
is a tool that uses
.BR socket "(2)"
to be able to interact with the kwm
window manager by sending simple text strings.
.SH OPTIONS
.IP config
.RS 10
.B reload
            Reload config ($HOME/.kwm/kwmrc)
.LP
.B spaces-key <opt>
            Set modifier used by OSX space-shortcuts
            <opt>: mod+mod+mod
.LP
.B optimal-ratio <opt>
            Override the optimal split-mode (golden ratio: 1.618)
            <opt>: floating point number
.LP
.B <opt>-border <arg>
            Enable window border
            <opt>: focused | marked
            <arg>: on | off
.LP
.B <opt>-border size <arg>
            Set window border thickness
            <opt>: focused | marked
            <arg>: number
.LP
.B <opt>-border color <arg>
            Set window border color
            <opt>: focused | marked
            <arg>: aarrggbb
.LP
.B <opt>-border radius <arg>
            Set window border radius
            <opt>: focused | marked
            <arg>: number
.LP
.B spawn <opt>
            The container position to be occupied by new windows
            <opt>: left | right
.LP
.B float-non-resizable <opt>
            Automatically float non-resizable windows
            <opt>: on | off
.LP
.B lock-to-container <opt>
            Automatically reapply container if window changes size
            <opt>: on | off
.LP
.B focus-follows-mouse <opt>
            Set state of focus-follows-mouse
            <opt>: toggle | autofocus | autoraise | off
.LP
.B standby-on-float <opt>
            Disable focus-follows-mouse when a floating window gains focus
            <opt>: on | off
.LP
.B cycle-focus <opt>
            Allow focus commands to wrap
            <opt>: screen | off
.LP
.B mouse-follows-focus <opt>
            Set state of mouse-follows-focus
            <opt>: on | off
.LP
.B tiling <opt>
            Set default tiling mode for Kwm
            <opt>: bsp | monocle | float | off
.LP
.B padding <opt>
            Set default padding
            <opt>: top bottom left right
.LP
.B gap <opt>
            Set default container gaps
            <opt>: vertical horizontal
.LP
.B space display_id space_id mode <opt>
            Override default tiling mode for space
            <opt>: bsp | monocle | float
.LP
.B space display_id space_id padding <opt>
            Override default padding for space
            <opt>: top bottom left right
.LP
.B space display_id space_id gap <opt>
            Override default gap for space
            <opt>: vertical | horizontal

.LP
.B display display_id mode <opt>
            Override default tiling mode for display
            <opt>: bsp | monocle | float
.LP
.B display display_id padding <opt>
            Override default padding for display
            <opt>: top bottom left right
.LP
.B display display_id gap <opt>
            Override default gap for display
            <opt>: vertical | horizontal
.LP
.B hotkeys <opt>
            Enable hotkeys registered using `bind`
            <opt>: on | off
.LP
.B split-ratio <opt>
            Set split-ratio for containers
            <opt>: 0 < floating point number < 1
.LP
.B add-role AXRole <opt>
            Add custom role for which windows Kwm should tile
            <opt>: name of application

            The following allows Kwm to tile borderless iTerm2
                kwmc config add-role AXDialog iTerm2
.RE
.IP bindsym
.RS 10
.B mode+mod+mod+mod-key <opt>
            Create a hotkey using symbol, consumed by Kwm
            <opt>: command | command <arg>
            <arg>: {app,app,app} -e | {app,app,app} -i
                -e: not enabled for listed applications
                -i: only enabled for listed applications
.RE
.IP bindcode
.RS 10
.B mode+mod+mod+mod-key <opt>
            Create a hotkey using keycode in hexadecimal, consumed by Kwm
            <opt>: command | command <arg>
            <arg>: {app,app,app} -e | {app,app,app} -i
                -e: not enabled for listed applications
                -i: only enabled for listed applications
.RE
.IP bindsym-passthrough
.RS 10
.B mode+mod+mod+mod-key <opt>
            Create a hotkey not consumed by Kwm
            <opt>: command | command <arg>
            <arg>: {app,app,app} -e | {app,app,app} -i
                -e: not enabled for listed applications
                -i: only enabled for listed applications
.RE
.IP bindcode-passthrough
.RS 10
.B mode+mod+mod+mod-key <opt>
            Create a hotkey using keycode in hexadecimal, not consumed by Kwm
            <opt>: command | command <arg>
            <arg>: {app,app,app} -e | {app,app,app} -i
                -e: not enabled for listed applications
                -i: only enabled for listed applications
.RE
.IP unbindsym
.RS 10
.B mode+mod+mod+mod-key
            Unbind a hotkey using symbol
.RE
.IP unbindcode
.RS 10
.B mode+mod+mod+mod-key
            Unbind a hotkey using keycode, in hexadeciaml
.RE
.IP rule
.RS 10
.B owner="" name="" properties={float=""; display=""; space=""} except=""
            Create rules that applies to specific windows
.RE
.IP quit
.RS 10
Terminate kwm
.RE
.IP write
.RS 10
.B some text
            Automatically emit keystrokes
.RE
.IP press
.RS 10
.B mod+mod+mod-key
            Send a key press
.RE
.IP window
.RS 10
.B -f <opt>
            Change focus between windows
            <opt>: north | east | south | west | prev | next | curr | window_id
.LP
.B -fm <opt>
            Change focus between monocle-subtree windows
            <opt>: prev | next
.LP
.B -s <opt>
            Swap window position
            <opt>: north | east | south | west | prev | next | mark
.LP
.B -z <opt>
            Adjust container zoom
            <opt>: fullscreen | parent
.LP
.B -t <opt>
            Toggle window floating
            <opt>: focused
.LP
.B -r <opt>
            Resize window to container size
            <opt>: focused
.LP
.B -c type <opt>
            Modify container type of window
            <opt>: monocle | bsp | toggle
.LP
.B -c reduce <opt>
            Decrement container split-ratio
            <opt>: 0 < floating point number < 1
.LP
.B -c expand <opt>
            Increment container split-ratio
            <opt>: 0 < floating point number < 1
.LP
.B -c reduce <opt> <arg>
            Decrement container split-ratio of window in direction
            <opt>: 0 < floating point number < 1
            <arg>: north | east | south | west
.LP
.B -c expand <opt> <arg>
            Increment container split-ratio of window in direction
            <opt>: 0 < floating point number < 1
            <arg>: north | east | south | west
.LP
.B -m <opt>
            Move window on the current space
            <opt>: north | east | south | west | mark | xoff | yoff
.LP
.B -m space <opt>
            Move window to a different space
            <opt>: workspace_id | previous | left | right
.LP
.B -m display <opt>
            Move window to an external display
            <opt>: display_id | prev | next
.LP
.B -mk focused
            Mark the focused window
.LP
.B -mk <opt> <arg>
            Mark window in direction of focused window
            <opt>: north | east | south | west
            <arg>: wrap | nowrap
.RE
.IP space
.RS 10
.B -f <opt>
            Change focus between spaces
            <opt>: workspace_id | previous | left | right
.LP
.B -fExperimental <opt>
            Change focus between spaces, skipping transitions animation
            (mission control does not update, requires `killall Dock`)
            <opt>: workspace_id | previous | left | right
.LP
.B -t <opt>
            Set tiling mode of space
            <opt>: bsp | monocle | float
.LP
.B -r <opt>
            Resize all windows to their container size
            <opt>: focused
.LP
.B -p <opt> <arg>
            Adjust padding
            <opt>: increase | decrease
            <arg>: all | left | right | top | bottom
.LP
.B -g <opt> <arg>
            Adjust gaps
            <opt>: increase | decrease
            <arg>: all | vertical | horizontal
.RE
.IP display
.RS 10
.B -f <opt>
            Change focus between displays
            <opt>: display_id | prev | next
.LP
.B -c <opt>
            Set active split-mode of display
            <opt>: optimal | vertical | horizontal
.RE
.IP tree
.RS 10
.B -pseudo <opt>
            Manage pseudo containers
            <opt>: create | destroy
.LP
.B rotate <opt>
            Rotate window-tree of current space
            <opt>: 90 | 180 | 270
.LP
.B save <opt>
            Save bsp-layout of window-tree of current space
            <opt>: filename
.LP
.B restore <opt>
            Restore bsp-layout of window-tree of current space
            <opt>: filename
.RE
.IP query
.RS 10
.B border <opt>
            Get the state of borders
            <opt>: focused | marked
.LP
.B window focused <opt>
            Get property of focused window
            <opt>: id | name | split | float
.LP
.B window focused <opt>
            Get id of window in direction of focused window
            <opt>: north | east | south | west
.LP
.B window marked <opt>
            Get property of marked window
            <opt>: id | name | split | float
.LP
.B window parent window_id1 window_id2
            Check if two windows have the same parent
.LP
.B window child window_id
            Get child position of window (left or right)
.LP
.B tiling mode
            Get tilling mode to be used for new spaces
.LP
.B tiling spawn
            Get child position used by new windows
.LP
.B tiling split-mode
            Get the mode used for binary splits
.LP
.B tiling split-ratio
            Get the ratio used for binary splits
.LP
.B space tag
            Get tag of the active space
.LP
.B space active
            Get id of the active space
.LP
.B space previous
            Get id of the previously active space
.LP
.B cycle-focus
            Get active cycle-focus mode
.LP
.B float-non-resizable
            Get state of float-non-resizable
.LP
.B lock-to-container
            Get state of lock-to-container
.LP
.B standby-on-float
            Get state of standby-on-float
.LP
.B focus-follows-mouse
            Get state of focus-follows-mouse
.LP
.B mouse-follows-focus
            Get state of mouse-follows-focus
.LP
.B window-list
            Get list of visible windows on active space
.RE
