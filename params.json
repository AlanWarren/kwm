{"name":"Kwm","tagline":"Tiling window manager with focus follows mouse for OSX","body":"## Description (TL;DR)\r\n\r\n[*Kwm*](https://koekeishiya.github.io/kwm) started as a simple project to get true focus-follows-mouse support on OSX through event tapping. It is now a tiling window manager that represents windows as the leaves of a binary tree.\r\n\r\n*Kwm* runs a local daemon to read messages and trigger functions. *Kwmc* can be used to write to *Kwm*'s socket, and the included hotkeys.cpp uses this program to define a mapping between keys and these functions. For information, check the readme located within the *kwmc* folder.\r\n\r\n*Kwm* uses the event taps API (Quartz Event Services) to observe, filter and alter user input events prior to their delivery to a foreground application. This allows for functionality such as focus-follows-mouse, remapping keys, and most importantly global hotkeys.\r\n\r\n*Kwm* requires access to osx accessibility. Creating a certificate and codesigning the binary works as well.  \r\nTested on Osx El Capitan (10.11.1 / 10.11.2).\r\n\r\n       Screencast          \r\n:-------------------------:\r\n![mov](https://cloud.githubusercontent.com/assets/6175959/11498553/6ccedee6-9820-11e5-8830-96e0bf19b4f2.gif)\r\n\r\n## Extended Information:\r\n\r\nThe different features; binary space partitioning, focus-follows-mouse and hotkey-system can all be enabled independently. This allows the user to choose what functionality fits their specific workflow.\r\n\r\n*Binary Space Partitioning:*  \r\nKwm tiles windows using a binary-tree structure. For information, check the usage section.  \r\n\r\n*Focus-Follows-Mouse:*  \r\nBoth autofocus and autoraise is available, however autofocus only redirects key input to the window below the cursor, the menubar is not accessible. Autoraise gives a window focus and raises it to the front. By default *Kwm* is set to use autoraise as it is meant to be used alongside the tiling functionality, and so windows should not overlap unless a window is specifically made floating.\r\n\r\n*System-Wide Hotkeys:*  \r\nKwm provides an instantaneous live-coding hotkey system for interacting with *Kwm*, and this can be customized by editing hotkeys.cpp. The user may use an external program for running a specific command on keypress instead. Using hotkeys to change window focus will work even if focus-follows-mouse has been disabled.\r\n\r\n*Multiple monitor support (in progress):*  \r\nThere are different ways to move a window between monitors.  \r\nThe first one is by using `kwmc screen -m prev|next|id`.  \r\nThe other option is to make the window floating and manually move it with the mouse, then un-float it. When moving a window directly with the mouse, *Kwm* will detect on mouse-release that the window position has changed, and automatically make it floating (Due to technical limitations this event must occur on the monitor which currently holds the window).\r\n\r\nThe first time a monitor is connected, the user may have to click several times on the screen for it to register. After this step, moving the mouse to a different monitor should activate the monitor automatically.\r\n\r\n## Build:\r\n\r\nBecause there is no app bundle, *Kwm* has to be started from a terminal. To compile and run *Kwm*, simply run\r\n\r\n      make\r\n      ./bin/kwm\r\n\r\nBy default, debug prints are enabled, and these can be turned off by runnning\r\n\r\n      make install\r\n\r\nThe hotkeys.cpp file can be edited live and recompiled separately using `make` again. By doing this, the user may change hotkeys without having to restart *Kwm*. \r\n\r\nTo make *Kwm* start automatically on login, update line 9 of kwm.plist to be the full path of the executable on your machine. With that change, link the plist file `ln -sf full/path/to/kwm.plist ~/Library/LaunchAgents`. Then logout/login to have Kwm start automatically.\r\n\r\nThis will also cause *Kwm* to restart itself when terminated, and no longer requires anything but the *Kwm* binary to have accessibility access. Removing the KeepAlive option on line 13-14 prevents *Kwm* from restarting once it is killed manually.\r\n\r\n## Configuration:\r\n\r\nThe default configuration file is `$HOME/.kwmrc` and is a script that contains *Kwmc* commands to be executed when *Kwm* starts. This file can be used to blacklist applications and specify a variety of settings, as well as run any command not restricted to *Kwmc*.\r\n\r\nA sample config can be found within the [examples](https://github.com/koekeishiya/kwm/tree/master/examples) directory.\r\n\r\n## Usage:\r\n\r\nWhen *Kwm* starts, it will automatically tile the windows of the current space, using binary space partitioning. This will also happen once for any other space the user might switch to.\r\n\r\nWhen *Kwm* detects a new window, it inserts it into a window tree at the specified point using the split-mode specified. When a window is closed, it will be removed from the window tree and the tree will be rebalanced.\r\n\r\nBy default, the insertion point is the focused window, but the user can mark a temporary insertion point to be used instead for the next insertion.\r\n\r\nThere are 3 types of split-modes available, these are optimal (width/height ratio), vertical and horizontal. The default split-mode is set to optimal (width/height ratio).\r\n\r\nExample:\r\n\r\n```\r\n            a                       a                       a\r\n           / \\         -->         / \\         -->         / \\    \r\n          1   2                   1   b                   1   b\r\n                                     / \\                     / \\\r\n                                    2   3                   c   3\r\n                                                           / \\\r\n                                                          2   4\r\n\r\n---------------------     ---------------------     --------------------- \r\n|         |         |     |         |         |     |         |    |    |\r\n|         |         |     |         |    2    |     |         | 2  |  4 |\r\n|         |         |     |         |    *    |     |         |    |    |\r\n|    1    |    2    |     |    1    |---------|     |    1    |---------|\r\n|         |    *    |     |         |         |     |         |         |\r\n|         |         |     |         |    3    |     |         |    3    |\r\n|         |         |     |         |         |     |         |         |\r\n---------------------     ---------------------     ---------------------\r\n\r\n```\r\n\r\n*Kwm* mainly consists of three panes so to speak. The main pane being the entire screen. After at least 1 window insertion has occurred, the screen will consist of either a left and right pane, or an upper and lower pane.\r\n\r\nThe width of the left/right pane can be changed, as well as the height of the upper/lower pane. Currently these cannot occur simultaneously, and the type of panes created is decided by the main pane split-mode.\r\n\r\nIf the main pane is split using vertical mode, a left and right pane is created.  \r\nIf the main pane is split using horizontal mode, an upper and lower pane is created.  \r\n\r\n## Default Hotkeys:\r\n    - ctrl+alt+cmd:\r\n        - t: toggle focus-mode (autofocus -> autoraise -> disabled)\r\n        - r: manually resize window to its containersize\r\n        - q: Quit Kwm\r\n\r\n        - m: mark the container to use for next window split\r\n\r\n        - o: use width/height ratio to determine optimal split (default)\r\n        - 7: use vertical split-mode\r\n        - -: use horizontal split-mode\r\n        - s: toggle split-type of existing container\r\n\r\n        - h: move vertical-splitter left (increase width of right-pane containers)\r\n        - l: move vertical-splitter right (increase width of left-pane containers)\r\n        - j: move horizontal-splitter down (increase height of upper-pane containers)\r\n        - k: move horizontal-splitter up (increase height of lower-pane containers)\r\n\r\n        - f: toggle window fullscreen\r\n        - p: toggle window parent container\r\n        - w: toggle window floating\r\n        - enter: opens a new iTerm window\r\n\r\n    - ctrl+alt:\r\n        - p: send window to previous screen\r\n        - n: send window to next screen\r\n\r\n        - 1: send window to screen id 0\r\n        - 2: send window to screen id 1\r\n        - 3: send window to screen id 2\r\n\r\n        - x: increase horizontal gap\r\n        - y: increase vertical gap\r\n\r\n        - larrow: increase screen padding-left \r\n        - rarrow: increase screen padding-right \r\n        - uarrow: increase screen padding-top \r\n        - darrow: increase screen padding-bottom \r\n\r\n    - alt+cmd\r\n        - t: toggle tiling mode of current space (float|tile)\r\n        - r: rotate window-tree by 180 degrees\r\n\r\n        - h: focus previous window\r\n        - l: focus next window\r\n\r\n        - p: swap with the previous window\r\n        - n: swap with the next window\r\n        - m: swap with the marked window\r\n\r\n        - x: decrease horizontal gap\r\n        - y: decrease vertical gap\r\n\r\n        - larrow: decrease screen padding-left \r\n        - rarrow: decrease screen padding-right \r\n        - uarrow: decrease screen padding-top \r\n        - darrow: decrease screen padding-bottom \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}